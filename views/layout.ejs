<!DOCTYPE html>
<html>
  <head>
    <title>AppNovedades</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/select2.min.css">
    <link rel="stylesheet" href="/styles/bootstrap-tagsinput.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
  <%- include layout/navigation.ejs %>
    <%- body %>
  <%- include layout/footer.ejs %>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->

    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.js"></script>
    <script src="/js/dependencies/underscore.js"></script>
    <script src="/js/dependencies/bootstrap.js"></script>
    <script src="/js/dependencies/typeahead.bundle.min.js"></script>
    <script src="/js/dependencies/select2/select2.full.min.js"></script>
    <script src="/js/dependencies/select2/i18n/es.js"></script>
    <script src="/js/dependencies/bootstrap-tagsinput.js"></script>
    <script src="/js/dependencies/jquery.charactercounter.js"></script>
    <script src="/js/dependencies/jquery.validate.js"></script>
    <script src="/js/institutionSelector.js"></script>
    <!--SCRIPTS END-->
    <!-- Google Maps API -->
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=true"></script>
    <!-- Handle location in tweets -->
    <script type="text/javascript">
      $(document).on('click', '#get-tweet-location', function() {
        var btn = $(this);
        btn.button('loading');
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            $.ajax({
              type: 'GET',
              dataType: "json",
              url: "http://maps.googleapis.com/maps/api/geocode/json?latlng=" +
              position.coords.latitude + "," + position.coords.longitude + "&sensor=false&language=en",
              data: {},
              success: function(data) {
                $.each(data['results'], function(i, val) {
                  if (val['types'][0] == 'locality' && val['types'][1] == 'political') {
                    $('#tweet-location').html('<button type="button" id="remove-tweet-location" class="btn btn-info" data-toggle="button">' + val['formatted_address'] + '</button><input type="hidden" name="location" value="' + val['formatted_address'] + '" />');
                  }
                });
              },
              error: function () { btn.button('reset'); }
            });
            btn.button('complete');
          });
        } else {
          btn.button('reset');
        }
      });

      $(document).on('click', '#remove-tweet-location', function() {
        $('#tweet-location').html('<button type="button" data-loading-text="Loading..." id="get-tweet-location" class="btn btn-primary">Location</button>');
      });
    </script>

    <!-- Handle file upload field in user settings -->
    <script>
      $(document).on('change', '.btn-file :file', function() {
        var input = $(this);
        var numFiles = input.get(0).files ? input.get(0).files.length : 1;
        var label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
        input.trigger('fileselect', [numFiles, label]);
      });

      $(document).ready( function() {
        $('.btn-file :file').on('fileselect', function(event, numFiles, label) {
          var input = $(this).parents('.input-group').find(':text');
          var log = numFiles > 1 ? numFiles + ' files selected' : label;

          if (input.length) {
            input.val(log);
          }
        });
      });
    </script>

    <!-- Handle tags in search -->
    <script>
      $(document).ready( function() {
        $('#search-bar').tagsinput({
          tagClass: function(item) {
            item = item.trim();
            if (item[0] == '@') {
              return 'label label-success';
            } else if (item[0] == '#') {
              return 'label label-info';
            } else {
              return 'label label-warning'
            }
          },
          confirmKeys: [13, 9, 32]
        });
      });
    </script>

    <!-- Handle form validation -->
    <script>
      $(document).ready( function() {
        $('#login_form').validate();
        $('#sign_up_form').validate({
          rules: {
            username: {
              required: true,
              maxlength: 20,
              minlength: 5
            },
            password_confirmation: {
              equalTo: '#password'
            }
          }
        });
        $('#profile_settings_form').validate({
          rules: {
            password_confirmation: {
              equalTo: '#password'
            }
          }
        });
      });
    </script>

    <!-- Handle feed refresh -->
    <script>
      $(document).ready( function() {

        $("#tweet-content").characterCounter({
          limit: '140'
        });


        setInterval(function() {
          $.get("/feed/last", function(data) {
            $("#tweets-refresh").html(data);
          });
        }, 30000);

      });
    </script>
  </body>
</html>
